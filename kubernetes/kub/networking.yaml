usefull commands
ip link
ip addr
ip addr add to add an ip to an interface
ps -pa #to list the processes
ip netns inspect docker0 #to list net ns
DNS
when we try to reach a website from a host or whatever
it first check the config on the file located at the host in the following path/etc/nsswitch.conf to pick which order its gonna lookup to reach the pod
file content
...
host: files dns
...
here for example its gonna check first on the local host file record: /etc/hosts
if he doesn't find it then i he gonna try to reach out throughout the dns defined on the following path /etc/resolv.conf
example of resolc.conf file
# Use nameservers provided by DHCP
# If DHCP is not used, these lines should be commented out
nameserver 192.168.1.1
nameserver 192.168.1.2

# Use Google's public DNS servers as a fallback
nameserver 8.8.8.8
nameserver 8.8.4.4

# Specify the search domain
search example.com

network namespace allows the creation of isolated network environments within a single Linux host. 
Each network namespace has its own network stack, including interfaces, routing tables, firewall rules, and so on
that are independent of other network namespaces
in docker neworking there is three type of docker network:
the none network which is a coompletely isolated network for containers
the host network its a share the network interface with th host
the bridge network This is the default network that is created when you install Docker. It allows containers to communicate with each other 
and with the host system ctainers in the same bridge network can communicate with each other using their hostnames. The network is isolated 
from the host network and other networks by default
if we are using the bridge network to get the ip addr of the container we should run this command:
ip netns to see the net ns useed
and take the output of the command and run the following command:
ip -n <net ns id> addr
or use the docker inspect command

CNI container network interface is a network interface that provides network connectivity to containers running in a container runtime, such as Docker or Containerd. 
The main goal of CNI is to standardize the way that containers connect to the network 
its used some plugins like flannel weavenet bridge...the specific plugin used in a given deployment will depend on the network requirements of the containers,
and the desired network configuration and security policies.
the kubelet is the responsible for creating containers on the pod and on the kubelet.service file we find the cni that been used with more details

services are cluster wide concept: when we create a service object it is assigned an ip address from a predifined range the kube-proxy object get that ip addr and 
create forwording rules on each node on the cluster
