Deamonset vs StatefulSet vs deployment
Deployments: are usually used for stateless applications. However, 
you can save the state of deployment by attaching a Persistent Volume to it
and make it stateful, but all the pods of a deployment will be sharing 
the same Volume and data across all of them will be same.

StatefulSet: is a Kubernetes resource used to manage stateful applications.
It manages the deployment and scaling of a set of Pods, and provides 
guarantee about the ordering and uniqueness of these Pods, unlike 
Deployments it doesnâ€™t create ReplicaSet(so u can't rollback to the previous version) rather itself creates the Pod 
with a unique naming convention. e.g. If you create a StatefulSet with name
counter, it will create a pod with name counter-0, and for multiple replicas
of a statefulset, their names will increment like counter-0, counter-1, etc
Every replica of a stateful set will have its own state, and each of 
the pods will be creating its own PVC(Persistent Volume Claim).
StatefulSets are useful in case of Databases especially when we need Highly 
Available Databases in production as we create a cluster of Database replicas
with one being the primary replica and others being the secondary replicas. 
The primary will be responsible for read/write operations and secondary for
read only operations and they will be syncing data with the primary one.

DaemonSet: is a controller that ensures that the pod runs on all the nodes
of the cluster. If a node is added/removed from a cluster, DaemonSet 
automatically adds/deletes the pod.
Some typical use cases of a DaemonSet is to run cluster level applications 
like:
    Monitoring Exporters: You would want to monitor all the nodes of your 
    cluster so you will need to run a monitor on all the nodes of the 
    cluster like NodeExporter.
    Logs Collection Daemon: You would want to export logs from all nodes 
    so you would need a DaemonSet of log collector like Fluentd to export
    logs from all your nodes.