Service Mesh with sidecar:
its concept is to extract all the non bisness logic out of the microservice and into in its own small sidecar application that:
handles these network logic
acts as a proxy
its third party application
cluster opertor can easily configure throw a simple api
and developers can now focus on the actual business logic
and the control plane take care of injects this proxy in every microservice pod so now those microservices can talk to each other throw those proxy
and the network layer for service to service communication consisting of control plane and the proxy is a service Mesh

Service Mesh Core features: Traffic Split
This features allows you to split traffic to a microservice 
lets say we have a new version release of a payment microservice and we want to test it, we can't be sure that there is no bug,
in this case we want to send for example just 10% percent of traffic to the new release and the rest of the previous stable release for period of time
to make sure it realy works
so this feature helps u release a new version without worrying about breaking the application and its also known as Canary Deployment

Service Mesh is a Pattern or Paradigm and Istio is one of its implementaion

Istio:
in istio architecture the proxy are envoy proxy
and the control plane component in istio is Istiod which manages and injects the envoy proxies in each of the microservices pod
what we can do with istio:
traffic routing
which service can communicate
traffic split
retry rules
there is two main CRD's for configuring the service to service communication:
  VirtualService: How to route the traffic to a specific service
  DestinationRule: Configure what happens to traffic for that destination(like what kind of loadbalancing to use to talk to the pods behind the destination service)
let's get deep and dive into that
DestinationRule: it is a way to group a service into subsets, u can take a
k8s service and patrition it however u want, in this example we gonna see a
partition based on version, and this destination rule backs a VirtualService
***
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name:
spec:
  host:
  subsets:
  - name: v1
    labels:
      version: v1
  - name: v2
    labels:
      version: v2
***
Content-based Routing its direct traffic based on http headers example
in this example the request that has foo:bar1 goes to the frontend v1 
and all the other request goes to frontend v2
***
apiVersion: networking.istio.io/v1alpha3
metadata:
  name: frontend
spec:
  hosts: 
  - "frontend"
  http:
  - match:
    - headers:
        foo:
          exact: bar1
    route:
    - destination:
        host: frontend
        subset: v1
  - route:
    - destination:
        host: frontend
        subset: v2

VertualService is the way that u list rules, so in this example here we are going to
do traffic split Demo
***
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: frontend
spec:
  hosts:
  - 
  http:
  - route:
    - destination:
        host: frontend
        subset: v1
      weight: 90

    - destination:
        host: frontend
        subset: v2
      weight: 10
***

Istio features:
Dynamic service discovery (it detect automaticaly new services and take care of injecting the envoy proxy)
Security-Certificate Management geneerate certificate for all the microservices in the cluster to allow secure TLS communication between proxies of those microservices
gather telemetry data 

Istio Ingress Gateway:
we can think of it as an alternative to nginx ingress controller
so istio gateway run as a pod in ur cluster and acts as a loadbalancer by accepting incoming traffic in ur cluster and gateway will directs traffic to MS using VirtualService

CRD:
CRD Custom Resource Definition are custom kubernetes component that can be used to allow configuring this third party technologies using kubernetes yaml file

Istio installation:
in order to install istio we first had to make sure we have 6 core cpu and at least 8Gb of RAM
fist we have to download the archive istio which contain the bin folder
after that we extract it 
then we have to add the binary executable istio folder path to the PATH env variable by running the following command
in this example the bin istio folder exist on /home/azureuser/istio-1.16.0
export PATH=$PATH:/home/azureuser/istio-1.16.0/bin
after runing the cmd below we should have istioctl cli available on the machine
then we run the following command to install all istio component
istioctl install
then to injects the envoy proxy in a deployed micro application
we should run this command
kubectl label namespace default istio-injection=enabled
then we should redeploy the microservice application to see the changes
to install istio addons we should run the following command
kubectl apply -f /home/azureuser/istio-1.16.0/samples/addons
this command will install severel addons like:
grafana & prometheus
jaeger this is actualy a service for tracing microservices request
zipkin is an alternative to jaeger
kiali has an amazing data vizualistaion features as well as feature to configure ur microservice set up and communication







